# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.supportedFilesystems = [ "btrfs" "ntfs" ];
  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "vmd" "ahci" "nvme" "usb_storage" "sd_mod" ];
  boot.initrd.kernelModules = [ "dm-snapshot" "cryptd" ];
  boot.initrd.luks.devices.cryptlvm.device = "/dev/disk/by-label/NIXOS_LUKS";
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=root" ];
    };

  fileSystems."/nix" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=nix" ];
    };

  fileSystems."/persist" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=persist" ];
    };

  fileSystems."/opt" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=opt" ];
    };

  fileSystems."/tmp" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=tmp" ];
    };

  fileSystems."/swap" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=swap" ];
    };

  fileSystems."/var/cache" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=cache" ];
    };

  fileSystems."/var/log" =
    { device = "/dev/disk/by-label/NIXOS_ROOT";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=log" ];
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-label/NIXOS_HOME";
      fsType = "btrfs";
      options = [ "noatime" "space_cache=v2" "compress=zstd" "ssd" "discard=async" "subvol=home" ];
    };

  fileSystems."/home/daangsangu/Disks/ACER" =
    { device = "/dev/disk/by-label/ACER";
      fsType = "ntfs";
    };

  fileSystems."/home/daangsangu/Disks/KINGSTON" =
    { device = "/dev/disk/by-label/KINGSTON";
      fsType = "ntfs";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-label/NIXOS_BOOT";
      fsType = "ext4";
    };

  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-label/NIXOS_EFI";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices = [
    { device = "/swap/swapfile";
      size = 16 * 1024;
    }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp43s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp0s20f3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.enableAllFirmware = lib.mkDefault true;
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
